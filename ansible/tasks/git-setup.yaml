- name: Git personal setup
  block:
    - name: Install latest Git
      community.general.homebrew:
        name: git
        state: latest

    - name: Create global .gitignore
      ansible.builtin.template:
        src: ../templates/.global_gitignore
        dest: ~/.global_gitignore
        mode: "0644"

    - name: Git personal setup email
      ansible.builtin.git_config:
        name: user.email
        scope: global
        value: "{{ git_email }}"

    - name: Git personal setup name
      ansible.builtin.git_config:
        name: user.name
        scope: global
        value: "{{ git_name }}"

    - name: Git set pull to rebase
      ansible.builtin.git_config:
        name: pull.rebase
        scope: global
        value: "true"

    - name: Set nvim as default git editor
      ansible.builtin.git_config:
        name: core.editor
        scope: global
        value: nvim

    - name: Set global git ignore
      ansible.builtin.git_config:
        name: core.excludesfile
        scope: global
        value: ~/.global_gitignore

    - name: Set git fetch to always prune
      ansible.builtin.git_config:
        name: fetch.prune
        scope: global
        value: "true"

    - name: Set global git default branch name
      ansible.builtin.git_config:
        name: init.defaultBranch
        scope: global
        value: main

    - name: Set autoSetupRemote to true to automatically set upstream branch on push
      ansible.builtin.git_config:
        name: push.autoSetupRemote
        scope: global
        value: "true"

    - name: Remove diff-so-fancy
      community.general.homebrew:
        name: diff-so-fancy
        state: absent

    - name: Set Git aliases
      ansible.builtin.git_config:
        name: alias.{{ item.name }}
        scope: global
        value: "{{ item.value }}"
      loop:
        # Basic shortcuts
        - { name: "co", value: "checkout" }
        - { name: "br", value: "branch" }
        - { name: "ci", value: "commit" }
        - { name: "st", value: "status" }
        - { name: "last", value: "log -1 HEAD" }
        - { name: "unstage", value: "reset HEAD --" }
        - { name: "lg", value: "log --oneline --decorate --graph --all" }
        
        # Difftastic aliases
        - { name: "dlog", value: "-c diff.external=difft log --ext-diff" }
        - { name: "dshow", value: "-c diff.external=difft show --ext-diff" }
        - { name: "ddiff", value: "-c diff.external=difft diff" }
        - { name: "dl", value: "-c diff.external=difft log -p --ext-diff" }
        - { name: "ds", value: "-c diff.external=difft show --ext-diff" }
        - { name: "dft", value: "-c diff.external=difft diff" }
        
        # Productivity aliases
        - { name: "amend", value: "commit --amend --no-edit" }
        - { name: "undo", value: "reset HEAD~1 --mixed" }
        - { name: "wip", value: "!git add -A && git commit -m 'WIP'" }
        - { name: "cleanup", value: "!f() { git rebase -i HEAD~${1:-10}; }; f" }
        - { name: "fixup", value: "commit --fixup" }
        - { name: "recent", value: "branch --sort=-committerdate --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:green)(%(committerdate:relative))%(color:reset) - %(contents:subject) - %(authorname)'" }
        - { name: "aliases", value: "config --get-regexp '^alias\\.'" }
        
        # Branch management
        - { name: "branches", value: "branch -vv" }
        - { name: "gone", value: "!git branch -vv | grep ': gone]' | awk '{print $1}'" }
        - { name: "prune-branches", value: "!git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D" }
        - { name: "main", value: "!git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')" }
        
        # Stash improvements
        - { name: "stash-all", value: "stash save --include-untracked" }
        - { name: "pop", value: "stash pop" }
        
        # History exploration
        - { name: "contributors", value: "shortlog --summary --numbered" }
        - { name: "graph", value: "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit" }
        - { name: "today", value: "log --since=midnight --author=\"$(git config user.name)\" --oneline" }
        - { name: "yesterday", value: "log --since=yesterday.midnight --until=midnight --author=\"$(git config user.name)\" --oneline" }
        
        # File operations
        - { name: "untrack", value: "rm --cached" }
        - { name: "ignored", value: "!git ls-files -v | grep '^[[:lower:]]'" }
        - { name: "modified", value: "diff --name-only --diff-filter=M" }
        
        # Commit search
        - { name: "find", value: "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%an] %Cred%d' --decorate --date=short --grep=\"$1\"; }; f" }
        - { name: "who", value: "blame -w -M -C" }
        
        # FZF-powered interactive aliases
        - { name: "fco", value: "!f() { git branch -a | grep -v HEAD | sed 's/.* //' | sed 's#remotes/[^/]*/##' | sort -u | fzf --preview 'git log --oneline --graph --date=short --color=always --pretty=\"format:%C(auto)%cd %h%d %s\" {}' | xargs git checkout; }; f" }
        - { name: "fcoc", value: "!f() { git log --pretty=oneline --abbrev-commit --all | fzf --preview 'git show --color=always {1}' | awk '{print $1}' | xargs git checkout; }; f" }
        - { name: "fshow", value: "!f() { git log --oneline --color=always | fzf --ansi --preview 'git show --color=always {1}' | awk '{print $1}' | xargs git show; }; f" }
        - { name: "fadd", value: "!f() { git status -s | fzf -m --preview 'git diff --color=always {2}' | awk '{print $2}' | xargs git add; }; f" }
        - { name: "funstage", value: "!f() { git diff --cached --name-only | fzf -m --preview 'git diff --cached --color=always {}' | xargs git reset HEAD; }; f" }
        - { name: "fstash", value: "!f() { git stash list | fzf --preview 'git stash show -p --color=always {1}' | cut -d: -f1 | xargs git stash apply; }; f" }
        - { name: "flog", value: "!f() { git log --oneline --color=always | fzf --ansi --multi --preview 'git show --color=always {1}' | awk '{print $1}'; }; f" }
        - { name: "fbr", value: "!f() { git branch -vv | fzf --preview 'git log --oneline --graph --date=short --color=always --pretty=\"format:%C(auto)%cd %h%d %s\" {1}' | awk '{print $1}' | sed 's/.* //' | xargs git checkout; }; f" }
        - { name: "fbrm", value: "!f() { git branch -vv | fzf --multi --preview 'git log --oneline --graph --date=short --color=always --pretty=\"format:%C(auto)%cd %h%d %s\" {1}' | awk '{print $1}' | xargs git branch -d; }; f" }
        - { name: "ftag", value: "!f() { git tag | fzf --preview 'git show --color=always {}' | xargs git checkout; }; f" }
        - { name: "fcherry", value: "!f() { git log --oneline | fzf --multi --preview 'git show --color=always {1}' | awk '{print $1}' | xargs -n1 git cherry-pick; }; f" }
        - { name: "frebase", value: "!f() { git log --oneline | fzf --preview 'git show --color=always {1}' | awk '{print $1}' | xargs -I {} git rebase -i {}^; }; f" }
        - { name: "ffix", value: "!f() { git log --oneline | fzf --preview 'git show --color=always {1}' | awk '{print $1}' | xargs git commit --fixup; }; f" }
        - { name: "fdiff", value: "!f() { git status -s | fzf --preview 'git diff --color=always {2}' | awk '{print $2}' | xargs git diff; }; f" }
        - { name: "fgrep", value: "!f() { git ls-files | fzf --preview 'bat --color=always --line-range :500 {}' | xargs grep \"${1:-}\"; }; f" }

    - name: Enable colorized output
      ansible.builtin.git_config:
        name: color.ui
        scope: global
        value: auto

    - name: Reset core.pager to default (removing diff-so-fancy)
      ansible.builtin.git_config:
        name: core.pager
        scope: global
        state: absent

    - name: Remove diff-so-fancy color configurations
      ansible.builtin.git_config:
        name: "{{ item }}"
        scope: global
        state: absent
      loop:
        - "color.diff-highlight.oldNormal"
        - "color.diff-highlight.oldHighlight"
        - "color.diff-highlight.newNormal"
        - "color.diff-highlight.newHighlight"

    - name: Set difftastic as external diff tool
      ansible.builtin.git_config:
        name: diff.external
        scope: global
        value: difft

    - name: Set difftastic as default diff tool
      ansible.builtin.git_config:
        name: diff.tool
        scope: global
        value: difftastic

    - name: Configure difftastic difftool command
      ansible.builtin.git_config:
        name: difftool.difftastic.cmd
        scope: global
        value: 'difft "$LOCAL" "$REMOTE"'

    - name: Disable difftool prompt
      ansible.builtin.git_config:
        name: difftool.prompt
        scope: global
        value: "false"

    - name: Enable pager for difftool
      ansible.builtin.git_config:
        name: pager.difftool
        scope: global
        value: "true"

  tags:
    - git-personal
